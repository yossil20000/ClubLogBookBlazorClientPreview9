@inherits DatePickerComponentBase
@using NodaTime

<div class="@ClassName" style="@MainStyle">
	<div class="@ContentClassName">
		@if (ViewMode == ViewMode.Days)
		{
			<div class="datepicker-days">
				<div class="datepicker-header">
					<button type="button" role="button" class="prev" @onclick="@PreviousMonth">@PrevContent</button>
					<button type="button" role="button" class="header-text" @onclick="@SelectMonth">@MonthText</button>
					<button type="button" role="button" class="next" @onclick="@NextMonth">@NextContent</button>
				</div>
				@if (DisplayDaysOfWeek)
				{
					<div class="datepicker-days-of-week">
						@if (DisplayWeekNumber)
						{
							<div class="dow">@WeekAbbreviation</div>
						}
						@{
							var dow = FirstDayOfWeek;
							do
							{
								<div class="@CssClassGenerator.DayOfWeek(dow, DaysOfWeekDisabled)">@DayOfWeekAbbreviation(dow)</div>
								dow = dow.Next();
							} while (dow != FirstDayOfWeek);
						}
					</div>
				}
				@if (DisplayWeekNumber)
				{
					<div class="week-numbers">
						@foreach (var week in GetWeeks)
						{
							<div class="week-number">@week</div>
						}
					</div>
				}
				<div class="days">
					@foreach (var date in Days)
					{
						<div class="day-wrapper">
							<button type="button" role="button" class="@CssClassGenerator.Day(date, this)" @onclick="@(e => DayClicked(e, date))">
								@DayTemplate(date)
							</button>
						</div>
					}
				</div>
				@if (ShowToday || ShowClear || ShowClose)
				{
					<div class="datepicker-footer">
						@if (ShowToday)
						{
							<button type="button" role="button" @onclick=@TodayClicked>@TodayText</button>
						}
						@if (ShowClear)
						{
							<button type="button" role="button" @onclick="@ClearClicked">@ClearText</button>
						}
						@if (ShowClose && !Inline)
						{
							<button type="button" role="button" @onclick="@CloseClicked">@CloseText</button>
						}
					</div>
				}
			</div>
		}
		else if (ViewMode == ViewMode.Months)
		{
			<div class="datepicker-months">
				<div class="datepicker-header">
					<button type="button" role="button" class="prev" @onclick=@PreviousYear>@PrevContent</button>
					<button type="button" role="button" class="header-text" @onclick=@SelectYear>@YearText</button>
					<button type="button" role="button" class="next" @onclick="@NextYear">@NextContent</button>
				</div>
				<div class="months">
					@for (int i = 1; i <= 12; i++)
					{
						var month = i;
						<button type="button" role="button" class="@CssClassGenerator.Month(month, disabledMonths[month - 1], this)" @onclick="@(e => MonthClicked(e, month))">@MonthName(month)</button>
					}
				</div>
			</div>
		}
		else if (ViewMode == ViewMode.Years)
		{
			<div class="datepicker-years">
				<div class="datepicker-header">
					<button type="button" role="button" class="prev" @onclick=@PreviousDecade>@PrevContent</button>
					<button type="button" role="button" class="header-text" @onclick=@SelectDecade>@DecadeText</button>
					<button type="button" role="button" class="next" @onclick=@NextDecade>@NextContent</button>
				</div>
				<div class="years">
					@for (int year = yearStart - 1; year <= yearEnd + 1; year++)
					{
						var y = year;
						<button type="button" role="button" class="@CssClassGenerator.Year(year, disabledYears[year], this)" @onclick=@(e => YearClicked(e, y))>
							@year
						</button>
					}
				</div>
			</div>
		}
		else if (ViewMode == ViewMode.Decades)
		{
			<div class="datepicker-decades">
				<div class="datepicker-header">
					<button type="button" role="button" class="prev" @onclick=@PreviousCentury>@PrevContent</button>
					<div class="header-text header-text-no-action">@CenturyText</div>
					<button type="button" role="button" class="next" @onclick=@NextCentury>@NextContent</button>
				</div>
			</div>
			<div class="decades">
				@for (int decade = decadeStart - 10; decade <= decadeEnd + 10; decade += 10)
				{
					var d = decade;
					<button type="button" role="button" class="@CssClassGenerator.Decade(decade, disabledDecades[decade], this)" @onclick=@(e => DecadeClicked(e, d))>
						@decade
					</button>
				}
			</div>
		}
	</div>
</div>

@code {
	// Render Fragments - need to put this to the bottom otherwise Visual Studio formating is affected
	[Parameter]
	public RenderFragment<LocalDate> DayTemplate { get; set; } = day =>@<text>@day.Day</text>;
}
