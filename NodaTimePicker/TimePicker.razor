@inherits TimePickerComponentBase

<div class="@ClassName" style="@MainStyle">
	@switch (ViewMode)
	{
		case TimeViewMode.Clock:
			{
				<div class="timepicker-clock">
					<button type="button" role="button" class="timepicker-hour-up timepicker-button" @onclick=@IncrementHour>@UpArrowIcon</button>
					<button type="button" role="button" class="timepicker-hour timepicker-button" @onclick=@DisplayHours>@HourDisplay</button>
					<button type="button" role="button" class="timepicker-hour-down timepicker-button" @onclick=@DecrementHour>@DownArrowIcon</button>

					<div class="timepicker-divider"><span>:</span></div>

					<button type="button" role="button" class="timepicker-minute-up timepicker-button" @onclick=@IncrementMinute>@UpArrowIcon</button>
					<button type="button" role="button" class="timepicker-minute timepicker-button" @onclick=@DisplayMinutes>@MinuteDisplay</button>
					<button type="button" role="button" class="timepicker-minute-down timepicker-button" @onclick=@DecrementMinute>@DownArrowIcon</button>

					@if (Is24Hour == false)
					{
						<button type="button" role="button" class="timepicker-meridiem timepicker-button" @onclick=@ToggleMeridiem>@(IsAM ? "AM" : "PM")</button>
					}
				</div>
			}
			break;
		case TimeViewMode.Hours:
			{
				<div class="timepicker-hours">
					<div class="timepicker-hour-grid">
						@for (int i = 0; i < 12; i++)
						{
							var hour = ViewModeHours_IsAM ? i : i + 12;
							<button type="button" role="button" class="timepicker-button hour @(SelectedTime.Hour == hour ? "active" : "")" @onclick=@(() => HourSelected(hour))>
								@($"{(Is24Hour ? hour : i):00}")
							</button>
						}
					</div>
					<div class="timepicker-hour-meridiems">
						<button type="button" role="button" class="timepicker-button @(ViewModeHours_IsAM ? "active" : "")" @onclick=@(() => ViewModeHours_IsAM = true)>AM</button>
						<button type="button" role="button" class="timepicker-button @(ViewModeHours_IsAM ? "" : "active")" @onclick=@(() => ViewModeHours_IsAM = false)>PM</button>
					</div>
				</div>
			}
			break;
		case TimeViewMode.Minutes:
			{
				<div class="timepicker-minutes">
					<div class="timepicker-minute-grid">
						@for (int i = 0; i < 60; i += MinuteStep)
						{
							var minute = i;
							<button type="button" role="button" class="timepicker-button minute @(SelectedTime.Minute == minute ? "active" : "")" @onclick=@(() => MinuteSelected(minute))>
								@($"{i:00}")
							</button>
						}
					</div>
				</div>
			}
			break;
	}
	@if (ShowClose)
	{
		<div class="timepicker-footer">
			<button type="button" role="button" class="timepicker-button-close" @onclick=@close>Close</button>
		</div>
	}
</div>