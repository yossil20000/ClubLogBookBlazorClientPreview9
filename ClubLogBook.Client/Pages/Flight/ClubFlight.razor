@page "/Flight/ClubFlight"
@using ClubLogBook.Application.ViewModels
@using System.Globalization
@using Microsoft.Extensions.Logging
@inject HttpClient Http
@inject IdentityAuthenticationStateProvider authStateProvider

@inject ILogger<Index> logger

<AuthorizeView Roles="Administrators,AccountManage,Members">
    <Authorized>
        @if (bInitialized == false)
        {
            <p><em>Loading...</em></p>
        }
        else if (bInitialized && !bShowEdit)
        {
            <div class="c_flights">
                <div class="c_flights__header">
                    @*<div class="a-f-header--1"><input type="date" class="btn-transaction c_account__cell--2-1"></div>
                        <div class="a-f-header--2">Flights 2</div>
                        <div class="a-f-header--3">Flights 3</div>*@
                    <input type="date" class="btn-transaction a-f-header--1" @bind="@FlightRecordIndexViewModel.FilterViewModel.FilterDateViewModel.FilterDateFrom">
                    <div class="btn-transaction a-f-header--2"><button @onclick="@OnSearch"><i class="material-icons">search</i></button></div>
                    <input type="date" class="btn-transaction a-f-header--3" @bind="@FlightRecordIndexViewModel.FilterViewModel.FilterDateViewModel.FilterDateTo">
                    <div class=" btn-transaction  a-f-filter--1">
                        <select value="@FlightRecordIndexViewModel.FilterViewModel.ClubFilterApplied" class="custom-select" @onchange="ClubSelected">


                            @foreach (var i in @FlightRecordIndexViewModel.FilterViewModel.ClubSelects)
                            {
                                <option value="@i.Id">@i.ClubName - (@(i.Id))</option>
                            }
                        </select>
                    </div>
                    <div class="btn-transaction  a-f-filter--2">
                        <select class="custom-select" @onchange="AirplaneSelected" value="@FlightRecordIndexViewModel.FilterViewModel.AirplaneFilterApplied">


                            @foreach (var i in @FlightRecordIndexViewModel.FilterViewModel.AirplaneSelects)
                            {
                                <option value="@i.Id">@i.TailNumber - (@(i.Id))</option>
                            }
                        </select>
                    </div>
                    <div class="btn-transaction  a-f-filter--3">
                        <select class="custom-select" @onchange="PilotSelected" value="@FlightRecordIndexViewModel.FilterViewModel.PilotFilterApplied">

                            @foreach (var i in @FlightRecordIndexViewModel.FilterViewModel.PilotSelects)
                            {
                                <option value="@i.Id">@i.FullName - (@(i.IdNumber))</option>
                            }
                        </select>
                    </div>
                    <div class="a-f-page--1">
                        <button type="button" class="btn-transaction   @FlightRecordIndexViewModel.PaginationInfo.Previous" @onclick="@(async () => await PrevClick())"
                                id="Previous"
                                asp-route-pageid="@(FlightRecordIndexViewModel.PaginationInfo.ActualPage - 1)"
                                aria-label="Previous">
                            Previous
                        </button>
                    </div>
                    <div class="a-f-page--2">
                        <span class="btn-transaction ">
                            @PageMessage
                        </span>
                    </div>
                    <div class="a-f-page--3">
                        <button type="button" class="btn-transaction  @FlightRecordIndexViewModel.PaginationInfo.Next " @onclick="@(async () => await NextClick())"
                                id="Next"
                                asp-route-pageid="@(FlightRecordIndexViewModel.PaginationInfo.ActualPage + 1)"
                                aria-label="Next">
                            Next
                        </button>
                    </div>

                </div>
                <button class="btn btn-grid-sort" @onclick="@(async () => await OnCreateFlight())"><u>Edit</u></button>
                <div class="c_flights__content">
                    @foreach (var flight in flights)
                    {
                        <div class="c_flights__list__row">
                            <div class="a-f-l-header-c-1"><button class="btn btn-grid-sort" @onclick="SortDate"><u>Flight</u></button></div>
                            <div class="a-f-l-data-c-1">@flight.Date.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture)</div>
                            <div class="a-f-l-header-c-2"><button class="btn btn-grid-sort" @onclick="SortName"><u>Pilot</u></button></div>
                            <div class="a-f-l-data-c-2">@flight.Pilot.FirstName @flight.Pilot.LastName</div>
                            <div class="a-f-l-header-c-3">Aircraft</div>
                            <div class="a-f-l-data-c-3">@flight.Aircraft.TailNumber</div>
                            <div class="a-f-l-header-c-4">Routh</div>
                            <div class="a-f-l-data-c-4">@flight.Routh</div>
                            <div class="a-f-l-header-c-5">Hobbs Start</div>
                            <div class="a-f-l-data-c-5">@flight.HobbsStart</div>
                            <div class="a-f-l-header-c-6">Hobbs End</div>
                            <div class="a-f-l-data-c-6">@flight.HobbsEnd</div>
                            <div class="a-f-l-header-c-7"><button class="btn btn-grid-sort" @onclick="SortEngienStart"><u>Engien Start</u></button></div>
                            <div class="a-f-l-data-c-7">@flight.EngineStart</div>
                            <div class="a-f-l-header-c-8">Engien End</div>
                            <div class="a-f-l-data-c-8">@flight.EngineEnd</div>
                            <div class="a-f-l-header-c-9">Action</div>
                            <div class="a-f-l-data-c-9"><button class="btn btn-grid-sort" @onclick="@(async () => await OnShowEdit(flight.Id))"><u>Edit</u></button></div>

                        </div>
                    }
                </div>
            </div>
        }
        else if(false)
        {
            <div>
                <h1>Show Edit</h1>
            </div>
        }
        else if (bShowEdit)
        {

            <form class="c_grid__edit">
                <div class="c_grid__edit__header  text-warning text-capitalize text-center">Edit Flight: @editFlightModel.Pilot.FirstName (@editFlightModel.Pilot.IdNumber) </div>
                <div class="c_grid__edit__content">
                    if(bCreate)
                    {
                    <div>
                       
                        @if (@FlightRecordIndexViewModel.FilterViewModel == null)
                        {
                            <select class="custom-select" disabled>
                                <option>(loading...)</option>
                            </select>
                        }
                        else
                        {
                            <select class="custom-select" @onchange="OnCreateAircraftSelected">
                                <option value="-1" disabled selected>(select)</option>
                                @for (var i = 0; i < @FlightRecordIndexViewModel.FilterViewModel.AirplaneSelects.Count; i++)
                                {
                                     <option value="@FlightRecordIndexViewModel.FilterViewModel.AirplaneSelects[i].Id">@FlightRecordIndexViewModel.FilterViewModel.AirplaneSelects[i].TailNumber - (@(FlightRecordIndexViewModel.FilterViewModel.PilotSelects[i].Id))</option>
                                }
                            </select>
                        }
                    </div>
                    <div>
                       
                        @if (@FlightRecordIndexViewModel.FilterViewModel.PilotSelects == null)
                        {
                            <select class="custom-select" disabled>
                                <option>(loading...)</option>
                            </select>
                        }
                        else
                        {
                            <select class="custom-select" @onchange="OnCreatePilotSelected">
                                <option value="-1" disabled selected>(select)</option>
                                @for (var i = 0; i < @FlightRecordIndexViewModel.FilterViewModel.PilotSelects.Count; i++)
                                {
                                    if (IsCurrentAdmin || CurrentUser.Id == @FlightRecordIndexViewModel.FilterViewModel.PilotSelects[i].UserId.ToString())
                                    {
                            <option value="@FlightRecordIndexViewModel.FilterViewModel.PilotSelects[i].Id">@FlightRecordIndexViewModel.FilterViewModel.PilotSelects[i].FullName - (@(FlightRecordIndexViewModel.FilterViewModel.PilotSelects[i].IdNumber))</option>
                                    }

                                }
                            </select>
                        }
                    </div>
                    }
                    <div class="c_grid__edit__content__row">
                        <label class="c_grid__edit__content__row__title grid-title">Flight</label>

                        <input type="date" class="c_grid__edit__content__row__description grid-input" @bind="@editFlightModel.Date">
                    </div>

                    <div class="c_grid__edit__content__row">
                        <label class="c_grid__edit__content__row__title grid-title">Routh</label>
                        <input type="text" class="c_grid__edit__content__row__description grid-input" @bind="@editFlightModel.Routh" placeholder="Enter Yor Rouht" />

                    </div>
                    <div class="c_grid__edit__content__row">
                        <label class="c_grid__edit__content__row__title grid-title">Engien Start</label>
                        <input type="number" class="c_grid__edit__content__row__description grid-input" @bind="@editFlightModel.EngineStart" placeholder="Enter Engien Start" />

                    </div>
                    <div class="c_grid__edit__content__row">
                        <label class="c_grid__edit__content__row__title grid-title">Engien End</label>
                        <input type="number" class="c_grid__edit__content__row__description grid-input" @bind="@editFlightModel.EngineEnd" placeholder="Enter Engien Start" />

                    </div>
                    <div class="c_grid__edit__content__row">
                        <label class="c_grid__edit__content__row__title grid-title">Hobbs Start</label>
                        <input type="number" class="c_grid__edit__content__row__description grid-input" @bind="@editFlightModel.HobbsStart" placeholder="Enter Hobbs Start" />

                    </div>
                    <div class="c_grid__edit__content__row">
                        <label class="c_grid__edit__content__row__title grid-title">Hobbs End</label>
                        <input type="number" class="c_grid__edit__content__row__description grid-input" @bind="@editFlightModel.HobbsEnd" placeholder="Enter Hobbs Start" />

                    </div>
                    <div class="c_grid__edit__content__row">
                        @if (bIsCreateFlight)
                        {
                            <button class="btn btn-grid-sort c_grid__edit__content__row__title grid-title" @onclick="@(async () => await OnCancle())"><u>Delete</u></button>
                            <button class="btn btn-grid-sort c_grid__edit__content__row__description grid-input" @onclick="@(async () => await CreateFlight())"><u>Save</u></button>
                        }
                        else
                        {
                            <button class="btn btn-grid-sort c_grid__edit__content__row__title grid-title" @onclick="@(async () => await OnEditDelete(editFlightModel.Id))"><u>Delete</u></button>
                            <button class="btn btn-grid-sort c_grid__edit__content__row__description grid-input" @onclick="@(async () => await OnEditSave())"><u>Save</u></button>
                        }

                    </div>

                </div>
            </form>
        }


    </Authorized>
    <NotAuthorized>
        <p>You're not Authorized , Please Loging as one of this User Type :Administrators,AccountManage,Members</p>
    </NotAuthorized>
</AuthorizeView>


@functions {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    IEnumerable<ClubFlightViewModel> flights = new List<ClubFlightViewModel>();
    FlightRecordIndexViewModel FlightRecordIndexViewModel { get; set; }
    FilterViewModel FilterViewModel { get; set; } = new FilterViewModel();
    bool IsCurrentAdmin { get; set; } = false;
    AdminUserInfo CurrentUser { get; set; }
    string PageMessage { get; set; } = "Not filterd";
    bool bInitialized { get; set; } = false;
    bool sortDateDescending = true;
    bool sortNameDescending = true;
    bool sortEngienDescending = true;
    bool lastSortParam = true;
    delegate void SortCommand(bool sortCommand);
    SortCommand lastSortCommand;
    bool bShowEdit { get; set; } = false;
    bool bIsCreateFlight { get; set; } = false;
    ClubFlightViewModel editFlightModel { get; set; }
    int selectedAircraft { get; set; }
    int selectedPilot { get; set; }
    private async Task OnCreateFlight()
    {
        editFlightModel = new ClubFlightViewModel();
        bShowEdit = true;
        bIsCreateFlight = true;
    }
    private async Task OnShowEdit(int id)
    {
        editFlightModel = FlightRecordIndexViewModel.FlightRecords.Where(i => i.Id == id).FirstOrDefault();
        if (editFlightModel == null)
            editFlightModel = new ClubFlightViewModel();
        bShowEdit = true;
    }
    private void SortDate(bool sortDecending = true)
    {
        if (sortDecending)
            flights = flights.OrderByDescending(x => x.Date).ThenByDescending(x => x.EngineStart).AsEnumerable();
        else
            flights = flights.OrderBy(x => x.Date).ThenBy(x => x.EngineStart).AsEnumerable();
        lastSortCommand = SortDate;
        lastSortParam = sortDecending;

    }
    private void SortName(bool sortDecending = true)
    {
        if (sortDecending)
            flights = flights.OrderByDescending(x => x.Pilot.FirstName).ThenByDescending(x => x.Pilot.LastName).ThenByDescending(x => x.Date).AsEnumerable();
        else
            flights = flights.OrderBy(x => x.Pilot.FirstName).ThenBy(x => x.Pilot.LastName).ThenBy(x => x.Date).AsEnumerable();
        lastSortCommand = SortName;
        lastSortParam = sortDecending;

    }
    private void SortEngienStart(bool sortDecending = true)
    {
        if (sortDecending)
            flights = flights.OrderByDescending(x => x.EngineStart).ThenByDescending(x => x.Date).ThenByDescending(x => x.Pilot.FirstName).AsEnumerable();
        else
            flights = flights.OrderBy(x => x.EngineStart).ThenBy(x => x.Date).ThenBy(x => x.Pilot.FirstName).AsEnumerable();
        lastSortCommand = SortEngienStart;
        lastSortParam = sortDecending;
    }
    async Task SortDate()
    {
        SortDate(sortDateDescending);
        sortDateDescending = !sortDateDescending;

    }

    async Task SortName()
    {
        SortName(sortNameDescending);
        sortNameDescending = !sortNameDescending;

    }
    async Task SortEngienStart()
    {
        SortEngienStart(sortEngienDescending);
        sortEngienDescending = !sortEngienDescending;
    }

    protected override async Task OnInitializedAsync()
    {
        FlightRecordIndexViewModel = await Http.GetJsonAsync<FlightRecordIndexViewModel>("api/ClubFlight/FlightWithFilter");
        //flights = await Http.GetJsonAsync<ClubFlightViewModel[]>("api/ClubFlight");
        flights = FlightRecordIndexViewModel.FlightRecords.ToList();
        //FilterViewModel.ClubFilterApplied = null;
        //FilterViewModel.PilotFilterApplied = 15;
        //FilterViewModel = await Http.PostJsonAsync<FilterViewModel>("api/ClubFlight/FilterViewModelPut", FilterViewModel);
        FilterViewModel = FlightRecordIndexViewModel.FilterViewModel;
        var authState = await authenticationStateTask;
        var user = authState.User;
        CurrentUser = await authStateProvider.CurrentUser();
        IsCurrentAdmin = user.IsInRole(IdentityInfo.Roles.Administrators.ToString());
        bInitialized = true;
        //OnActualPageChanged();
        System.Diagnostics.Debug.WriteLine($"ClubFlight.razor 1: OnInitializedAsync User {CurrentUser.UserName} flight Count: {flights?.Count() ?? -1}");
        logger.LogDebug($"ClubFlight.razor : OnInitializedAsync User ");
        System.Diagnostics.Debug.WriteLine($"ClubFlight.razor 2: OnInitializedAsync User {CurrentUser.UserName} flight Count: {flights?.Count() ?? -1}");
    }
    private void OnActualPageChanged()
    {

        int totalItems = FlightRecordIndexViewModel.PaginationInfo.TotalItems;
        int taken = (FlightRecordIndexViewModel.PaginationInfo.ActualPage - 1) * FlightRecordIndexViewModel.PaginationInfo.ItemsPerPage;
        int skip = (FlightRecordIndexViewModel.PaginationInfo.ActualPage - 1) * FlightRecordIndexViewModel.PaginationInfo.ItemsPerPage;
        int itemPerPage = FlightRecordIndexViewModel.PaginationInfo.ItemsPerPage;
        int take = (totalItems - skip) > itemPerPage ? FlightRecordIndexViewModel.PaginationInfo.ItemsPerPage : totalItems - taken;
        flights = FlightRecordIndexViewModel.FlightRecords.Skip(skip).Take(take).ToList();
        PageMessage = $"Showing {taken + take} :  {totalItems} - Page {FlightRecordIndexViewModel.PaginationInfo.ActualPage }  : { @FlightRecordIndexViewModel.PaginationInfo.TotalPages}";
        lastSortCommand(lastSortParam);
    }
    protected async Task PrevClick()
    {

        if (FlightRecordIndexViewModel.PaginationInfo.ActualPage > 1)
        {
            //FlightRecordIndexViewModel.PaginationInfo.PageCommand = PageCommand.MovePrevious;
            //FlightRecordIndexViewModel = await Http.PutJsonAsync<FlightRecordIndexViewModel>("api/ClubFlight/Put", FlightRecordIndexViewModel);
            FlightRecordIndexViewModel.PaginationInfo.ActualPage--;
            OnActualPageChanged();
        }

    }
    protected async Task NextClick()
    {
        if ((FlightRecordIndexViewModel.PaginationInfo.TotalPages - FlightRecordIndexViewModel.PaginationInfo.ActualPage) > 0)
        {
            //FlightRecordIndexViewModel.PaginationInfo.PageCommand = PageCommand.MoveNext;
            //FlightRecordIndexViewModel = await Http.PutJsonAsync<FlightRecordIndexViewModel>("api/ClubFlight/Put", FlightRecordIndexViewModel);
            FlightRecordIndexViewModel.PaginationInfo.ActualPage++;
            OnActualPageChanged();
        }

    }
    private void OnSearchDone()
    {
        int itemShown = FlightRecordIndexViewModel.PaginationInfo.ItemsPerPage * FlightRecordIndexViewModel.PaginationInfo.ActualPage;
        int totalItems = FlightRecordIndexViewModel.PaginationInfo.TotalItems;
        int remain = totalItems - itemShown;
        if (remain > 0)
            PageMessage = $"Showing {itemShown} :  {totalItems} -Page {FlightRecordIndexViewModel.PaginationInfo.ActualPage }  : { @FlightRecordIndexViewModel.PaginationInfo.TotalPages}";
        else
        {
            PageMessage = $"Showing {Math.Abs(remain)} :  {totalItems} -Page {FlightRecordIndexViewModel.PaginationInfo.ActualPage}  : { @FlightRecordIndexViewModel.PaginationInfo.TotalPages}";

        }
    }
    protected async Task OnSearch()
    {
        FlightRecordIndexViewModel = await Http.PutJsonAsync<FlightRecordIndexViewModel>("api/ClubFlight/Put", FlightRecordIndexViewModel);
        OnActualPageChanged();
    }
    void OnDateChanged()
    {

    }
    void PilotSelected(ChangeEventArgs e)
    {
        FlightRecordIndexViewModel.PaginationInfo.ActualPage = 1;
        FlightRecordIndexViewModel.PaginationInfo.Next = "";
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            //emp.Pilot = pilots[index];
            FlightRecordIndexViewModel.FilterViewModel.PilotFilterApplied = index;

        }
        else
            FlightRecordIndexViewModel.FilterViewModel.PilotFilterApplied = null;

    }
    void ClubSelected(ChangeEventArgs e)
    {
        FlightRecordIndexViewModel.PaginationInfo.ActualPage = 1;
        if (int.TryParse((string)e.Value, out var index))
        {
            //emp.Pilot = pilots[index];
            FlightRecordIndexViewModel.FilterViewModel.ClubFilterApplied = index;

        }
        else
            FlightRecordIndexViewModel.FilterViewModel.ClubFilterApplied = null;
    }
    void AirplaneSelected(ChangeEventArgs e)
    {
        FlightRecordIndexViewModel.PaginationInfo.ActualPage = 1;
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            //emp.Pilot = pilots[index];
            FlightRecordIndexViewModel.FilterViewModel.AirplaneFilterApplied = index;

        }
        else
            FlightRecordIndexViewModel.FilterViewModel.AirplaneFilterApplied = null;
    }
    private async Task OnEditDelete(int id)
    {
        await Http.SendJsonAsync(HttpMethod.Delete, $"api/ClubFlight", editFlightModel.Id);
        bShowEdit = false;
    }
    private async Task OnEditSave()
    {
        await Http.SendJsonAsync(HttpMethod.Post, "api/ClubFlight", editFlightModel);
        bShowEdit = false;
    }


    //For Create
    protected async Task CreateFlight()
    {
        editFlightModel.Pilot.Id = selectedPilot;
        editFlightModel.Aircraft.Id = selectedAircraft;
        await Http.SendJsonAsync(HttpMethod.Put, "api/ClubFlight", editFlightModel);


    }
    void OnCreatePilotSelected(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            //emp.Pilot = pilots[index];
            selectedPilot = index;
        }
    }
    void OnCreateAircraftSelected(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            //emp.Pilot = pilots[index];
            selectedAircraft = index;
        }
    }
    protected async Task OnCancle()
    {
        bShowEdit = false;
        bIsCreateFlight = false;
    }
}
